from binaryTree import *
import copy
dataList=[int(item) for item in input().split()]
root=inputTreeLevelWiseUsingList(dataList)
# res=[]
# postOrderIter(root,res)
# print(res)

# print(maxEle(root).data)
# # print(searchBT(root,4),searchBT(root,4).data)
# print(searchBT(root,9))
# print(height(root))
# print(heightLevelOrder(root))
# print(deepestNode(root).data)
# res=[]
# levelOrder(root,res)
# print(res)
# print(diameter(root))
# print(allRootToLeafPaths(root))
# print(sumAllRootToLeafPaths(root))
# print(maxPathSum(root))
# print(pathFinder(root,7))
# mirror(root)
# root2=copy.deepcopy(root)
# mirror(root)
# printLevelOrderNewLine(root)
# printLevelOrderNewLine(root2)
# print(detectMirrors(root,root2))
# print(lcaEasy(root,5,6))
# root=binaryTreeUsingPreorderInorder(["A","B","D","E","C","F"],["D","B","E","A","F","C"])
# printLevelOrderNewLine(root)
# # zigZagOrder(root)
# print(verticalSum(root))
# print(countBinaryTreePossible(20))
# root=specialPreorderTree(['I','L','I','L','L'])
printLevelOrderNewLine(root)